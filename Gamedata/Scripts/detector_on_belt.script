local art_database = {

    [clsid.artefact] 		  = { dist = 50 , snd = path_random },
    [clsid.artefact_s] 		  = { dist = 50 , snd = path_random },

}

artefact = {}
artefact_target = {}

function add_target(id, freq, dist)
	freq = freq or get_random_freq()
	dist = dist or 200
	artefact_target[id] = { freq = freq , dist = dist }
end

function scan_online_sources()
	print_dbg("scan_online_sources")
	local pos = db.actor:position()
	local st = db.storage
	
	-- Search
	empty_table(active_sources)
	for i=1,65534 do
		local obj = st[i] and st[i].object or level.object_by_id(i)
		if obj then
			local id = obj:id()
			local sec = obj:section()
			local cls = obj:clsid()
			local dist_pos = pos:distance_to(obj:position())
			
			-- Specific Targets (Quests)
			if artefact_target[id] and (dist_pos < artefact_target[id].dist) then
				if TB_RF_Receiver_Packages then
					--[TB MODIFIED]
					if string.find(sec,"quest_tb_package_") then
						print_dbg("found tb_package | section: %s - clsid: %s - distance: %s", sec, cls, dist_pos)
						active_sources[#active_sources + 1] = create_rf_table( id, cls, dist_pos, artefact_target[id].freq, artefact_target[id].dist, { tb_beep } )
					-- Default beeps
					else
						print_dbg("found active_source | section: %s - clsid: %s - distance: %s", sec, cls, dist_pos)
						active_sources[#active_sources + 1] = create_rf_table( id, cls, dist_pos, artefact_target[id].freq, artefact_target[id].dist, { path_beep } )
					end
				else
					print_dbg("found active_source | section: %s - clsid: %s - distance: %s", sec, cls, dist_pos)
					active_sources[#active_sources + 1] = create_rf_table( id, cls, dist_pos, artefact_target[id].freq, artefact_target[id].dist, { path_beep } )
				end
			-- Common RF Sources
			elseif art_database[cls] and (dist_pos < art_database[cls].dist) then
				print_dbg("found active_source | section: %s - clsid: %s - distance: %s", sec, cls, dist_pos)

				-- Stash
				if (cls == clsid.inventory_box_s) or (cls == clsid.inventory_box) then
					local _level = level.name()
					if RF_stashes[_level] and RF_stashes[_level][id] then
						active_sources[#active_sources + 1] = create_rf_table( id, cls, dist_pos, RF_stashes[_level][id], art_database[cls].dist, art_database[cls].snd )
					end

				-- Artefacts
				elseif (cls == clsid.artefact) or (cls == clsid.artefact_s) then
					if art_database[sec] then
						active_sources[#active_sources + 1] = create_rf_table( id, cls, dist_pos, art_database[sec].freq, art_database[cls].dist, art_database[cls].snd )
					end
				
				-- Anything else
				elseif art_database[cls] and art_database[cls].freq then
					active_sources[#active_sources + 1] = create_rf_table( id, cls, dist_pos, art_database[cls].freq, art_database[cls].dist, art_database[cls].snd )
				end
			end
		end
	end
end

local snd_on = sound_object("detectors\\RF\\on")
local snd_off = sound_object("detectors\\RF\\off")
local snd_noise = sound_object("detectors\\RF\\noise")
local d_state = false
local vol_n = 0

function sound_trigger(state)
	if state and (not d_state) then
		snd_on:play(db.actor, 0, sound_object.s2d)
		d_state = true
		vol_n = 0.7
		snd_noise.volume = vol_n
	elseif (not state) and d_state then
		snd_off:play(db.actor, 0, sound_object.s2d)
		d_state = false
		vol_n = 0
		snd_noise.volume = vol_n
	end
end



local function actor_on_update()
	local obj_det = db.actor:item_in_slot(9) or db.actor:active_detector()
    local artefact = clsid.artefact[i] or clsid.artefact_s[i]

	
	if not (obj_det and obj_det:section() == _device and obj_det:condition() >= obj_det:power_critical()) then
		sound_trigger(false)
		return
	end
	sound_trigger(true)

    emission = GetEvent("surge", "state") or GetEvent("psi_storm", "state")

    local vol_noise_lowest = 0.7

    for i=1,#artefact do
        local obj = level.object_by_id(clsid.artefact[i]) or level.object_by_id(clsid.artefact_s[i])
		if obj and (not emission) then
			local dist = db.actor:position():distance_to(obj:position())

			local dist_ratio = dist / artefact[i].dist
			local vol_range = get_vol_range(artefact[i].freq)
            local vol_signal = clamp( (1-dist_ratio) * vol_range , 0 , 1) or 0
            local vol_noise = clamp( dist_ratio * vol_range , 0.2 , 0.7 ) or 0.7
            vol_noise_lowest = (vol_noise < vol_noise_lowest) and vol_noise or vol_noise_lowest
        end
    end
    vol_n = vol_noise_lowest
end

local function actor_on_item_take(obj)
	local id = obj:id()
	if artefact_target[id] then
		clear_target(id)
		scan_online_sources()
	end
end

function on_game_start()
    RegisterScriptCallback("actor_on_item_take",actor_on_item_take)
    RegisterScriptCallback("actor_on_update", actor_on_update)
end
